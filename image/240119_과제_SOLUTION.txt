[1번]
CREATE USER TEST
IDENTIFIED BY 1234;

GRANT CONNECT, RESOURCE TO TEST;
ALTER USER TEST
QUOTA 2M ON SYSTEM;
GRANT CREATE VIEW TO TEST;

[2번]
CREATE TABLE GRADECARD (
	NO NUMBER(2) PRIMARY KEY,
	NAME VARCHAR2(12) NOT NULL,
	KOR NUMBER(4) NOT NULL, CHECK(KOR BETWEEN 0 AND 100),
	ENG NUMBER(4) NOT NULL, CHECK(KOR BETWEEN 0 AND 100),
	MAT NUMBER(4) NOT NULL, CHECK(KOR BETWEEN 0 AND 100),
	TOT NUMBER(4) DEFAULT 0
);

[3번]
CREATE SEQUENCE GRADECARD_SEQ
INCREMENT BY 1
START WITH 1;

ALTER TABLE GRADECARD
MODIFY (NAME VARCHAR2(15));

INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, '자바', 90, 100, 67);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, '오라클', 96, 94, 89);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, 'HTML5', 67, 79, 56);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, 'Jquery', 87, 88, 72);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, 'JSP', 48, 65, 41, 0);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, 'JAVASCRIPT', 65, 97, 51);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, '스프링', 79, 58, 61);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, 'CSS3', 88, 57, 51);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, '마이바티스', 60, 99, 65);
INSERT INTO GRADECARD VALUES (GRADECARD_SEQ.NEXTVAL, 'XML', 95, 67, 45);

SELECT * FROM GRADECARD;

[4번] 총계는 국어, 영어, 수학의 합을 구합니다.
UPDATE GRADECARD (TOT)
SELECT TOT=KOR+ENG+MAT

[5번] 아래의 출력결과처럼 구합니다. 등수는 1등부터 10등까지 구합니다. (인라인뷰이용)
select s.*, rownum 등수
from (select no "번호", name "이름", kor "국어", eng "영어", mat "수학", tot "총계"
	from GRADECARD
	order by tot desc)s
where rownum <= 10;

SELECT NO "번호", NAME "이름", KOR "국어", ENG "영어", MAT "수학", KOR+ENG+MAT "총계", ROWNUM "등수"
FROM ( SELECT NO, NAME, KOR, ENG, MAT, KOR+ENG+MAT
	FROM GRADECARD
	ORDER BY KOR+ENG+MAT DESC);

[6번] 5등인 학생 출력해보세요.
select *
from (select s.*, rownum 등수
	from (select no "번호", name "이름", kor "국어", eng "영어", mat "수학", tot "총계"
		from GRADECARD
		order by tot desc)s
	where rownum <= 10
	)
where 등수=5;


CREATE VIEW OUTPUT_VIEW
AS
SELECT NO "번호", NAME "이름", KOR "국어", ENG "영어", MAT "수학", KOR+ENG+MAT "총계", ROWNUM "등수"
FROM ( SELECT NO, NAME, KOR, ENG, MAT, KOR+ENG+MAT
	FROM GRADECARD
	ORDER BY KOR+ENG+MAT DESC
         )
SELECT * FROM OUTPUT_VIEW
WHERE 등수 = 5;

[7번] 4등에서 7등까지 출력해보세요.
select *
from (select s.*, rownum 등수
	from (select no "번호", name "이름", kor "국어", eng "영어", mat "수학", tot "총계"
		from GRADECARD
		order by tot desc)s
	where rownum <= 7  (가져오고자 하는 숫자로(여기서는 7) 바꾸면 효율이 올라간다)
	)
where 등수 between 4 and 7;


SELECT * FROM OUTPUT_VIEW
WHERE 등수 BETWEEN 4 AND 7;

[8번] 아래와 같은 데이터를 갖는 GRADE 테이블을 만듭니다.

CREATE TABLE GRADE (
	LOWSCORE NUMBER(3),
	HIGHSCORE NUMBER(3),
	GRADE VARCHAR2(4)
);

CREATE SEQUENCE LOW_SEQ
INCREMENT BY 5
START WITH 60;

CREATE SEQUENCE HI_SEQ
INCREMENT BY 5
START WITH 64;

INSERT INTO GRADE VALUES(0, 59, 'F');
INSERT INTO GRADE VALUES(LOW_SEQ.NEXTVAL, HI_SEQ.NEXTVAL, 'D0');
INSERT INTO GRADE VALUES(LOW_SEQ.NEXTVAL, HI_SEQ.NEXTVAL, 'D+');
INSERT INTO GRADE VALUES(LOW_SEQ.NEXTVAL, HI_SEQ.NEXTVAL, 'C0');
INSERT INTO GRADE VALUES(LOW_SEQ.NEXTVAL, HI_SEQ.NEXTVAL, 'C+');
INSERT INTO GRADE VALUES(LOW_SEQ.NEXTVAL, HI_SEQ.NEXTVAL, 'B0');
INSERT INTO GRADE VALUES(LOW_SEQ.NEXTVAL, HI_SEQ.NEXTVAL, 'B+');
INSERT INTO GRADE VALUES(LOW_SEQ.NEXTVAL, HI_SEQ.NEXTVAL, 'A0');
INSERT INTO GRADE VALUES(LOW_SEQ.NEXTVAL, 100, 'A+');

[9번] 아래와 같이 출력되도록 SQL문 작성해 보세요.
*SALGRADE와 똑같은 예제.... SLAGRADE 예제 다시 찾아보기
*JOIN으로 접근해야 한다.

SELECT NO, NAME, KOR, ENG, MAT, TOT, TRUNC(TOT/3) "평균"  
FROM GRADECARD  
  
SELECT NO, NAME, KOR, ENG, MAT, TOT, ROUND(TOT/3) "평균", GRADE "등급"  
FROM GRADECARD C, GRADE G  
WHERE G.LOWSCORE <= ROUND(TOT/3)  
AND ROUND(TOT/3)<=G.HISCORE;

[10번] GRADECARD 테이블의 컬럼을 추가해 봅시다.
ALTER TABLE GRADECARD
ADD (AVG NUMBER(3), GRADE VARCHAR2(5));

[11번] 컬럼에 평균과 등급을 구해 봅시다.(UPDATE)
UPDATE GRADECARD  
SET AVG=ROUND(TOT/3);  
  
SELECT * FROM GRADECARD;  
  
UPDATE GRADECARD C  
SET C.GRADE = (SELECT G.GRADE  
				FROM GRADE G  
				WHERE G.LOWSCORE <= ROUND(TOT/3)  
				AND ROUND(TOT/3) <= G.HISCORE  
			  );  
  
SELECT * FROM GRADECARD; 

[12번] SCOTT계정에서 GRADECARD의 SELECT 권한을 부여한다.
GRANT SELECT ON GRADECARD TO SCOTT;  
CONN scott/tiger  
select * from TEST.GRADECARD;



